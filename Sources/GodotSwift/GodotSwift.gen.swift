// Generated by GodotSwift code generator
import Foundation
import Godot
public struct String {
    var _godot_string: godot_string = godot_string()
    func casecmpTo (to: String)-> Int {
       abort ()
    }
    func nocasecmpTo (to: String)-> Int {
       abort ()
    }
    func naturalnocasecmpTo (to: String)-> Int {
       abort ()
    }
    func length ()-> Int {
       abort ()
    }
    func substr (from: Int, len: Int)-> String {
       abort ()
    }
    func find (what: String, from: Int)-> Int {
       abort ()
    }
    func count (what: String, from: Int, to: Int)-> Int {
       abort ()
    }
    func countn (what: String, from: Int, to: Int)-> Int {
       abort ()
    }
    func findn (what: String, from: Int)-> Int {
       abort ()
    }
    func rfind (what: String, from: Int)-> Int {
       abort ()
    }
    func rfindn (what: String, from: Int)-> Int {
       abort ()
    }
    func match (expr: String)-> Bool {
       abort ()
    }
    func matchn (expr: String)-> Bool {
       abort ()
    }
    func beginsWith (text: String)-> Bool {
       abort ()
    }
    func endsWith (text: String)-> Bool {
       abort ()
    }
    func isSubsequenceOf (text: String)-> Bool {
       abort ()
    }
    func isSubsequenceOfi (text: String)-> Bool {
       abort ()
    }
    func bigrams ()-> PackedStringArray {
       abort ()
    }
    func similarity (text: String)-> Double {
       abort ()
    }
    func format (values: Variant, placeholder: String)-> String {
       abort ()
    }
    func replace (what: String, forwhat: String)-> String {
       abort ()
    }
    func replacen (what: String, forwhat: String)-> String {
       abort ()
    }
    func `repeat` (count: Int)-> String {
       abort ()
    }
    func insert (position: Int, what: String)-> String {
       abort ()
    }
    func capitalize ()-> String {
       abort ()
    }
    func split (delimiter: String, allowEmpty: Bool, maxsplit: Int)-> PackedStringArray {
       abort ()
    }
    func rsplit (delimiter: String, allowEmpty: Bool, maxsplit: Int)-> PackedStringArray {
       abort ()
    }
    func splitFloats (delimiter: String, allowEmpty: Bool)-> PackedFloat32Array {
       abort ()
    }
    func join (parts: PackedStringArray)-> String {
       abort ()
    }
    func toUpper ()-> String {
       abort ()
    }
    func toLower ()-> String {
       abort ()
    }
    func left (position: Int)-> String {
       abort ()
    }
    func right (position: Int)-> String {
       abort ()
    }
    func stripEdges (left: Bool, right: Bool)-> String {
       abort ()
    }
    func stripEscapes ()-> String {
       abort ()
    }
    func lstrip (chars: String)-> String {
       abort ()
    }
    func rstrip (chars: String)-> String {
       abort ()
    }
    func getExtension ()-> String {
       abort ()
    }
    func getBasename ()-> String {
       abort ()
    }
    func plusFile (file: String)-> String {
       abort ()
    }
    func unicodeAt (at: Int)-> Int {
       abort ()
    }
    func dedent ()-> String {
       abort ()
    }
    func hash ()-> Int {
       abort ()
    }
    func md5Text ()-> String {
       abort ()
    }
    func sha1Text ()-> String {
       abort ()
    }
    func sha256Text ()-> String {
       abort ()
    }
    func md5Buffer ()-> PackedByteArray {
       abort ()
    }
    func sha1Buffer ()-> PackedByteArray {
       abort ()
    }
    func sha256Buffer ()-> PackedByteArray {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func isAbsPath ()-> Bool {
       abort ()
    }
    func isRelPath ()-> Bool {
       abort ()
    }
    func getBaseDir ()-> String {
       abort ()
    }
    func getFile ()-> String {
       abort ()
    }
    func xmlEscape (escapeQuotes: Bool)-> String {
       abort ()
    }
    func xmlUnescape ()-> String {
       abort ()
    }
    func uriEncode ()-> String {
       abort ()
    }
    func uriDecode ()-> String {
       abort ()
    }
    func cEscape ()-> String {
       abort ()
    }
    func cUnescape ()-> String {
       abort ()
    }
    func jsonEscape ()-> String {
       abort ()
    }
    func isValidIdentifier ()-> Bool {
       abort ()
    }
    func isValidInteger ()-> Bool {
       abort ()
    }
    func isValidFloat ()-> Bool {
       abort ()
    }
    func isValidHexNumber (withPrefix: Bool)-> Bool {
       abort ()
    }
    func isValidHtmlColor ()-> Bool {
       abort ()
    }
    func isValidIpAddress ()-> Bool {
       abort ()
    }
    func isValidFilename ()-> Bool {
       abort ()
    }
    func toInt ()-> Int {
       abort ()
    }
    func toFloat ()-> Double {
       abort ()
    }
    func hexToInt ()-> Int {
       abort ()
    }
    func binToInt ()-> Int {
       abort ()
    }
    func lpad (minLength: Int, character: String)-> String {
       abort ()
    }
    func rpad (minLength: Int, character: String)-> String {
       abort ()
    }
    func padDecimals (digits: Int)-> String {
       abort ()
    }
    func padZeros (digits: Int)-> String {
       abort ()
    }
    func trimPrefix (prefix: String)-> String {
       abort ()
    }
    func trimSuffix (suffix: String)-> String {
       abort ()
    }
    func toAsciiBuffer ()-> PackedByteArray {
       abort ()
    }
    func toUtf8Buffer ()-> PackedByteArray {
       abort ()
    }
    func toUtf16Buffer ()-> PackedByteArray {
       abort ()
    }
    func toUtf32Buffer ()-> PackedByteArray {
       abort ()
    }
}

public struct Vector2 {
    var _godot_vector2: godot_vector2 = godot_vector2()
    func angle ()-> Double {
       abort ()
    }
    func angleTo (to: Vector2)-> Double {
       abort ()
    }
    func angleToPoint (to: Vector2)-> Double {
       abort ()
    }
    func directionTo (b: Vector2)-> Vector2 {
       abort ()
    }
    func distanceTo (to: Vector2)-> Double {
       abort ()
    }
    func distanceSquaredTo (to: Vector2)-> Double {
       abort ()
    }
    func length ()-> Double {
       abort ()
    }
    func lengthSquared ()-> Double {
       abort ()
    }
    func normalized ()-> Vector2 {
       abort ()
    }
    func isNormalized ()-> Bool {
       abort ()
    }
    func isEqualApprox (to: Vector2)-> Bool {
       abort ()
    }
    func posmod (mod: Double)-> Vector2 {
       abort ()
    }
    func posmodv (modv: Vector2)-> Vector2 {
       abort ()
    }
    func project (b: Vector2)-> Vector2 {
       abort ()
    }
    func lerp (to: Vector2, weight: Double)-> Vector2 {
       abort ()
    }
    func slerp (to: Vector2, weight: Double)-> Vector2 {
       abort ()
    }
    func cubicInterpolate (b: Vector2, preA: Vector2, postB: Vector2, weight: Double)-> Vector2 {
       abort ()
    }
    func moveToward (to: Vector2, delta: Double)-> Vector2 {
       abort ()
    }
    func rotated (phi: Double)-> Vector2 {
       abort ()
    }
    func orthogonal ()-> Vector2 {
       abort ()
    }
    func floor ()-> Vector2 {
       abort ()
    }
    func ceil ()-> Vector2 {
       abort ()
    }
    func round ()-> Vector2 {
       abort ()
    }
    func aspect ()-> Double {
       abort ()
    }
    func dot (with: Vector2)-> Double {
       abort ()
    }
    func slide (n: Vector2)-> Vector2 {
       abort ()
    }
    func bounce (n: Vector2)-> Vector2 {
       abort ()
    }
    func reflect (n: Vector2)-> Vector2 {
       abort ()
    }
    func cross (with: Vector2)-> Double {
       abort ()
    }
    func abs ()-> Vector2 {
       abort ()
    }
    func sign ()-> Vector2 {
       abort ()
    }
    func snapped (step: Vector2)-> Vector2 {
       abort ()
    }
    func clamped (length: Double)-> Vector2 {
       abort ()
    }
}

public struct Vector2i {
    var _godot_vector2i: godot_vector2i = godot_vector2i()
    func aspect ()-> Double {
       abort ()
    }
    func sign ()-> Vector2i {
       abort ()
    }
    func abs ()-> Vector2i {
       abort ()
    }
}

public struct Rect2 {
    var _godot_rect2: godot_rect2 = godot_rect2()
    func getArea ()-> Double {
       abort ()
    }
    func hasNoArea ()-> Bool {
       abort ()
    }
    func hasPoint (point: Vector2)-> Bool {
       abort ()
    }
    func isEqualApprox (rect: Rect2)-> Bool {
       abort ()
    }
    func intersects (b: Rect2, includeBorders: Bool)-> Bool {
       abort ()
    }
    func encloses (b: Rect2)-> Bool {
       abort ()
    }
    func intersection (b: Rect2)-> Rect2 {
       abort ()
    }
    func merge (b: Rect2)-> Rect2 {
       abort ()
    }
    func expand (to: Vector2)-> Rect2 {
       abort ()
    }
    func grow (amount: Double)-> Rect2 {
       abort ()
    }
    func growSide (side: Int, amount: Double)-> Rect2 {
       abort ()
    }
    func growIndividual (left: Double, top: Double, right: Double, bottom: Double)-> Rect2 {
       abort ()
    }
    func abs ()-> Rect2 {
       abort ()
    }
}

public struct Rect2i {
    var _godot_rect2i: godot_rect2i = godot_rect2i()
    func getArea ()-> Int {
       abort ()
    }
    func hasNoArea ()-> Bool {
       abort ()
    }
    func hasPoint (point: Vector2i)-> Bool {
       abort ()
    }
    func intersects (b: Rect2i)-> Bool {
       abort ()
    }
    func encloses (b: Rect2i)-> Bool {
       abort ()
    }
    func intersection (b: Rect2i)-> Rect2i {
       abort ()
    }
    func merge (b: Rect2i)-> Rect2i {
       abort ()
    }
    func expand (to: Vector2i)-> Rect2i {
       abort ()
    }
    func grow (amount: Int)-> Rect2i {
       abort ()
    }
    func growSide (side: Int, amount: Int)-> Rect2i {
       abort ()
    }
    func growIndividual (left: Int, top: Int, right: Int, bottom: Int)-> Rect2i {
       abort ()
    }
    func abs ()-> Rect2i {
       abort ()
    }
}

public struct Vector3 {
    var _godot_vector3: godot_vector3 = godot_vector3()
    func minAxis ()-> Int {
       abort ()
    }
    func maxAxis ()-> Int {
       abort ()
    }
    func angleTo (to: Vector3)-> Double {
       abort ()
    }
    func directionTo (b: Vector3)-> Vector3 {
       abort ()
    }
    func distanceTo (b: Vector3)-> Double {
       abort ()
    }
    func distanceSquaredTo (b: Vector3)-> Double {
       abort ()
    }
    func length ()-> Double {
       abort ()
    }
    func lengthSquared ()-> Double {
       abort ()
    }
    func normalized ()-> Vector3 {
       abort ()
    }
    func isNormalized ()-> Bool {
       abort ()
    }
    func isEqualApprox (to: Vector3)-> Bool {
       abort ()
    }
    func inverse ()-> Vector3 {
       abort ()
    }
    func snapped (step: Vector3)-> Vector3 {
       abort ()
    }
    func rotated (byAxis: Vector3, phi: Double)-> Vector3 {
       abort ()
    }
    func lerp (to: Vector3, weight: Double)-> Vector3 {
       abort ()
    }
    func slerp (to: Vector3, weight: Double)-> Vector3 {
       abort ()
    }
    func cubicInterpolate (b: Vector3, preA: Vector3, postB: Vector3, weight: Double)-> Vector3 {
       abort ()
    }
    func moveToward (to: Vector3, delta: Double)-> Vector3 {
       abort ()
    }
    func dot (with: Vector3)-> Double {
       abort ()
    }
    func cross (with: Vector3)-> Vector3 {
       abort ()
    }
    func outer (with: Vector3)-> Basis {
       abort ()
    }
    func toDiagonalMatrix ()-> Basis {
       abort ()
    }
    func abs ()-> Vector3 {
       abort ()
    }
    func floor ()-> Vector3 {
       abort ()
    }
    func ceil ()-> Vector3 {
       abort ()
    }
    func round ()-> Vector3 {
       abort ()
    }
    func posmod (mod: Double)-> Vector3 {
       abort ()
    }
    func posmodv (modv: Vector3)-> Vector3 {
       abort ()
    }
    func project (b: Vector3)-> Vector3 {
       abort ()
    }
    func slide (n: Vector3)-> Vector3 {
       abort ()
    }
    func bounce (n: Vector3)-> Vector3 {
       abort ()
    }
    func reflect (n: Vector3)-> Vector3 {
       abort ()
    }
    func sign ()-> Vector3 {
       abort ()
    }
}

public struct Vector3i {
    var _godot_vector3i: godot_vector3i = godot_vector3i()
    func minAxis ()-> Int {
       abort ()
    }
    func maxAxis ()-> Int {
       abort ()
    }
    func sign ()-> Vector3i {
       abort ()
    }
    func abs ()-> Vector3i {
       abort ()
    }
}

public struct Transform2D {
    var _godot_transform2d: godot_transform2d = godot_transform2d()
    func inverse ()-> Transform2D {
       abort ()
    }
    func affineInverse ()-> Transform2D {
       abort ()
    }
    func getRotation ()-> Double {
       abort ()
    }
    func getOrigin ()-> Vector2 {
       abort ()
    }
    func getScale ()-> Vector2 {
       abort ()
    }
    func orthonormalized ()-> Transform2D {
       abort ()
    }
    func rotated (phi: Double)-> Transform2D {
       abort ()
    }
    func scaled (scale: Vector2)-> Transform2D {
       abort ()
    }
    func translated (offset: Vector2)-> Transform2D {
       abort ()
    }
    func basisXform (v: Vector2)-> Vector2 {
       abort ()
    }
    func basisXformInv (v: Vector2)-> Vector2 {
       abort ()
    }
    func interpolateWith (xform: Transform2D, weight: Double)-> Transform2D {
       abort ()
    }
    func isEqualApprox (xform: Transform2D)-> Bool {
       abort ()
    }
}

public struct Plane {
    var _godot_plane: godot_plane = godot_plane()
    func normalized ()-> Plane {
       abort ()
    }
    func center ()-> Vector3 {
       abort ()
    }
    func isEqualApprox (toPlane: Plane)-> Bool {
       abort ()
    }
    func isPointOver (plane: Vector3)-> Bool {
       abort ()
    }
    func distanceTo (point: Vector3)-> Double {
       abort ()
    }
    func hasPoint (point: Vector3, epsilon: Double)-> Bool {
       abort ()
    }
    func project (point: Vector3)-> Vector3 {
       abort ()
    }
    func intersect3 (b: Plane, c: Plane)-> Variant {
       abort ()
    }
    func intersectsRay (from: Vector3, dir: Vector3)-> Variant {
       abort ()
    }
    func intersectsSegment (from: Vector3, to: Vector3)-> Variant {
       abort ()
    }
}

public struct Quat {
    var _godot_quat: godot_quat = godot_quat()
    func length ()-> Double {
       abort ()
    }
    func lengthSquared ()-> Double {
       abort ()
    }
    func normalized ()-> Quat {
       abort ()
    }
    func isNormalized ()-> Bool {
       abort ()
    }
    func isEqualApprox (to: Quat)-> Bool {
       abort ()
    }
    func inverse ()-> Quat {
       abort ()
    }
    func dot (with: Quat)-> Double {
       abort ()
    }
    func slerp (to: Quat, weight: Double)-> Quat {
       abort ()
    }
    func slerpni (to: Quat, weight: Double)-> Quat {
       abort ()
    }
    func cubicSlerp (b: Quat, preA: Quat, postB: Quat, weight: Double)-> Quat {
       abort ()
    }
    func getEuler ()-> Vector3 {
       abort ()
    }
}

public struct AABB {
    var _godot_aabb: godot_aabb = godot_aabb()
    func abs ()-> AABB {
       abort ()
    }
    func getArea ()-> Double {
       abort ()
    }
    func hasNoArea ()-> Bool {
       abort ()
    }
    func hasNoSurface ()-> Bool {
       abort ()
    }
    func hasPoint (point: Vector3)-> Bool {
       abort ()
    }
    func isEqualApprox (aabb: AABB)-> Bool {
       abort ()
    }
    func intersects (with: AABB)-> Bool {
       abort ()
    }
    func encloses (with: AABB)-> Bool {
       abort ()
    }
    func intersectsPlane (plane: Plane)-> Bool {
       abort ()
    }
    func intersection (with: AABB)-> AABB {
       abort ()
    }
    func merge (with: AABB)-> AABB {
       abort ()
    }
    func expand (toPoint: Vector3)-> AABB {
       abort ()
    }
    func grow (by: Double)-> AABB {
       abort ()
    }
    func getSupport (dir: Vector3)-> Vector3 {
       abort ()
    }
    func getLongestAxis ()-> Vector3 {
       abort ()
    }
    func getLongestAxisIndex ()-> Int {
       abort ()
    }
    func getLongestAxisSize ()-> Double {
       abort ()
    }
    func getShortestAxis ()-> Vector3 {
       abort ()
    }
    func getShortestAxisIndex ()-> Int {
       abort ()
    }
    func getShortestAxisSize ()-> Double {
       abort ()
    }
    func getEndpoint (idx: Int)-> Vector3 {
       abort ()
    }
    func intersectsSegment (from: Vector3, to: Vector3)-> Variant {
       abort ()
    }
    func intersectsRay (from: Vector3, dir: Vector3)-> Variant {
       abort ()
    }
}

public struct Basis {
    var _godot_basis: godot_basis = godot_basis()
    func inverse ()-> Basis {
       abort ()
    }
    func transposed ()-> Basis {
       abort ()
    }
    func orthonormalized ()-> Basis {
       abort ()
    }
    func determinant ()-> Double {
       abort ()
    }
    func rotated (axis: Vector3, phi: Double)-> Basis {
       abort ()
    }
    func scaled (scale: Vector3)-> Basis {
       abort ()
    }
    func getScale ()-> Vector3 {
       abort ()
    }
    func getEuler ()-> Vector3 {
       abort ()
    }
    func tdotx (with: Vector3)-> Double {
       abort ()
    }
    func tdoty (with: Vector3)-> Double {
       abort ()
    }
    func tdotz (with: Vector3)-> Double {
       abort ()
    }
    func getOrthogonalIndex ()-> Int {
       abort ()
    }
    func slerp (to: Basis, weight: Double)-> Basis {
       abort ()
    }
    func isEqualApprox (b: Basis)-> Bool {
       abort ()
    }
    func getRotationQuat ()-> Quat {
       abort ()
    }
}

public struct Transform {
    var _godot_transform: godot_transform = godot_transform()
    func inverse ()-> Transform {
       abort ()
    }
    func affineInverse ()-> Transform {
       abort ()
    }
    func orthonormalized ()-> Transform {
       abort ()
    }
    func rotated (axis: Vector3, phi: Double)-> Transform {
       abort ()
    }
    func scaled (scale: Vector3)-> Transform {
       abort ()
    }
    func translated (offset: Vector3)-> Transform {
       abort ()
    }
    func lookingAt (target: Vector3, up: Vector3)-> Transform {
       abort ()
    }
    func interpolateWith (xform: Transform, weight: Double)-> Transform {
       abort ()
    }
    func isEqualApprox (xform: Transform)-> Bool {
       abort ()
    }
}

public struct Color {
    var _godot_color: godot_color = godot_color()
    func toArgb32 ()-> Int {
       abort ()
    }
    func toAbgr32 ()-> Int {
       abort ()
    }
    func toRgba32 ()-> Int {
       abort ()
    }
    func toArgb64 ()-> Int {
       abort ()
    }
    func toAbgr64 ()-> Int {
       abort ()
    }
    func toRgba64 ()-> Int {
       abort ()
    }
    func inverted ()-> Color {
       abort ()
    }
    func lerp (to: Color, weight: Double)-> Color {
       abort ()
    }
    func lightened (amount: Double)-> Color {
       abort ()
    }
    func darkened (amount: Double)-> Color {
       abort ()
    }
    func toHtml (withAlpha: Bool)-> String {
       abort ()
    }
    func blend (over: Color)-> Color {
       abort ()
    }
    func isEqualApprox (to: Color)-> Bool {
       abort ()
    }
}

public struct StringName {
    var _godot_string_name: godot_string_name = godot_string_name()
}

public struct NodePath {
    var _godot_node_path: godot_node_path = godot_node_path()
    func isAbsolute ()-> Bool {
       abort ()
    }
    func getNameCount ()-> Int {
       abort ()
    }
    func getName (idx: Int)-> StringName {
       abort ()
    }
    func getSubnameCount ()-> Int {
       abort ()
    }
    func getSubname (idx: Int)-> StringName {
       abort ()
    }
    func getConcatenatedSubnames ()-> StringName {
       abort ()
    }
    func getAsPropertyPath ()-> NodePath {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
}

public struct RID {
    var _godot_rid: godot_rid = godot_rid()
    func getId ()-> Int {
       abort ()
    }
}

public struct Callable {
    var _godot_callable: godot_callable = godot_callable()
    func isNull ()-> Bool {
       abort ()
    }
    func isCustom ()-> Bool {
       abort ()
    }
    func isStandard ()-> Bool {
       abort ()
    }
    func getObject ()-> Object {
       abort ()
    }
    func getObjectId ()-> Int {
       abort ()
    }
    func getMethod ()-> StringName {
       abort ()
    }
    func hash ()-> Int {
       abort ()
    }
    func unbind (argcount: Int)-> Callable {
       abort ()
    }
    func call ()-> Variant {
       abort ()
    }
    func callDeferred () {
       abort ()
    }
    func bind ()-> Callable {
       abort ()
    }
}

public struct Signal {
    var _godot_signal: godot_signal = godot_signal()
    func isNull ()-> Bool {
       abort ()
    }
    func getObject ()-> Object {
       abort ()
    }
    func getObjectId ()-> Int {
       abort ()
    }
    func getName ()-> StringName {
       abort ()
    }
    func connect (callable: Callable, binds: Array, flags: Int)-> Int {
       abort ()
    }
    func disconnect (callable: Callable) {
       abort ()
    }
    func isConnected (callable: Callable)-> Bool {
       abort ()
    }
    func getConnections ()-> Array {
       abort ()
    }
    func emit () {
       abort ()
    }
}

public struct Dictionary {
    var _godot_dictionary: godot_dictionary = godot_dictionary()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func clear () {
       abort ()
    }
    func has (key: Variant)-> Bool {
       abort ()
    }
    func hasAll (keys: Array)-> Bool {
       abort ()
    }
    func erase (key: Variant)-> Bool {
       abort ()
    }
    func hash ()-> Int {
       abort ()
    }
    func keys ()-> Array {
       abort ()
    }
    func values ()-> Array {
       abort ()
    }
    func duplicate (deep: Bool)-> Dictionary {
       abort ()
    }
    func get (key: Variant, `default`: Variant)-> Variant {
       abort ()
    }
}

public struct Array {
    var _godot_array: godot_array = godot_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func clear () {
       abort ()
    }
    func hash ()-> Int {
       abort ()
    }
    func pushBack (value: Variant) {
       abort ()
    }
    func pushFront (value: Variant) {
       abort ()
    }
    func append (value: Variant) {
       abort ()
    }
    func appendArray (array: Array) {
       abort ()
    }
    func resize (size: Int)-> Int {
       abort ()
    }
    func insert (position: Int, value: Variant) {
       abort ()
    }
    func remove (position: Int) {
       abort ()
    }
    func erase (value: Variant) {
       abort ()
    }
    func front ()-> Variant {
       abort ()
    }
    func back ()-> Variant {
       abort ()
    }
    func find (what: Variant, from: Int)-> Int {
       abort ()
    }
    func rfind (what: Variant, from: Int)-> Int {
       abort ()
    }
    func findLast (value: Variant)-> Int {
       abort ()
    }
    func count (value: Variant)-> Int {
       abort ()
    }
    func has (value: Variant)-> Bool {
       abort ()
    }
    func popBack ()-> Variant {
       abort ()
    }
    func popFront ()-> Variant {
       abort ()
    }
    func sort () {
       abort ()
    }
    func sortCustom (obj: Object, func: StringName) {
       abort ()
    }
    func shuffle () {
       abort ()
    }
    func bsearch (value: Variant, before: Bool)-> Int {
       abort ()
    }
    func bsearchCustom (value: Variant, obj: Object, func: StringName, before: Bool)-> Int {
       abort ()
    }
    func invert () {
       abort ()
    }
    func duplicate (deep: Bool)-> Array {
       abort ()
    }
    func slice (begin: Int, end: Int, step: Int, deep: Bool)-> Array {
       abort ()
    }
    func max ()-> Variant {
       abort ()
    }
    func min ()-> Variant {
       abort ()
    }
}

public struct PackedByteArray {
    var _godot_packed_byte_array: godot_packed_byte_array = godot_packed_byte_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Int) {
       abort ()
    }
    func pushBack (value: Int)-> Bool {
       abort ()
    }
    func append (value: Int)-> Bool {
       abort ()
    }
    func appendArray (array: PackedByteArray) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Int)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Int)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedByteArray {
       abort ()
    }
    func getStringFromAscii ()-> String {
       abort ()
    }
    func getStringFromUtf8 ()-> String {
       abort ()
    }
    func getStringFromUtf16 ()-> String {
       abort ()
    }
    func getStringFromUtf32 ()-> String {
       abort ()
    }
    func hexEncode ()-> String {
       abort ()
    }
    func compress (compressionMode: Int)-> PackedByteArray {
       abort ()
    }
    func decompress (bufferSize: Int, compressionMode: Int)-> PackedByteArray {
       abort ()
    }
    func decompressDynamic (maxOutputSize: Int, compressionMode: Int)-> PackedByteArray {
       abort ()
    }
}

public struct PackedInt32Array {
    var _godot_packed_int32_array: godot_packed_int32_array = godot_packed_int32_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Int) {
       abort ()
    }
    func pushBack (value: Int)-> Bool {
       abort ()
    }
    func append (value: Int)-> Bool {
       abort ()
    }
    func appendArray (array: PackedInt32Array) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Int)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Int)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedInt32Array {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedInt32Array {
       abort ()
    }
}

public struct PackedInt64Array {
    var _godot_packed_int64_array: godot_packed_int64_array = godot_packed_int64_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Int) {
       abort ()
    }
    func pushBack (value: Int)-> Bool {
       abort ()
    }
    func append (value: Int)-> Bool {
       abort ()
    }
    func appendArray (array: PackedInt64Array) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Int)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Int)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedInt64Array {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedInt64Array {
       abort ()
    }
}

public struct PackedFloat32Array {
    var _godot_packed_float32_array: godot_packed_float32_array = godot_packed_float32_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Double) {
       abort ()
    }
    func pushBack (value: Double)-> Bool {
       abort ()
    }
    func append (value: Double)-> Bool {
       abort ()
    }
    func appendArray (array: PackedFloat32Array) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Double)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Double)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedFloat32Array {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedFloat32Array {
       abort ()
    }
}

public struct PackedFloat64Array {
    var _godot_packed_float64_array: godot_packed_float64_array = godot_packed_float64_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Double) {
       abort ()
    }
    func pushBack (value: Double)-> Bool {
       abort ()
    }
    func append (value: Double)-> Bool {
       abort ()
    }
    func appendArray (array: PackedFloat64Array) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Double)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Double)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedFloat64Array {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedFloat64Array {
       abort ()
    }
}

public struct PackedStringArray {
    var _godot_packed_string_array: godot_packed_string_array = godot_packed_string_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: String) {
       abort ()
    }
    func pushBack (value: String)-> Bool {
       abort ()
    }
    func append (value: String)-> Bool {
       abort ()
    }
    func appendArray (array: PackedStringArray) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: String)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: String)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedStringArray {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedStringArray {
       abort ()
    }
}

public struct PackedVector2Array {
    var _godot_packed_vector2_array: godot_packed_vector2_array = godot_packed_vector2_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Vector2) {
       abort ()
    }
    func pushBack (value: Vector2)-> Bool {
       abort ()
    }
    func append (value: Vector2)-> Bool {
       abort ()
    }
    func appendArray (array: PackedVector2Array) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Vector2)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Vector2)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedVector2Array {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedVector2Array {
       abort ()
    }
}

public struct PackedVector3Array {
    var _godot_packed_vector3_array: godot_packed_vector3_array = godot_packed_vector3_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Vector3) {
       abort ()
    }
    func pushBack (value: Vector3)-> Bool {
       abort ()
    }
    func append (value: Vector3)-> Bool {
       abort ()
    }
    func appendArray (array: PackedVector3Array) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Vector3)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Vector3)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedVector3Array {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedVector3Array {
       abort ()
    }
}

public struct PackedColorArray {
    var _godot_packed_color_array: godot_packed_color_array = godot_packed_color_array()
    func size ()-> Int {
       abort ()
    }
    func isEmpty ()-> Bool {
       abort ()
    }
    func set (index: Int, value: Color) {
       abort ()
    }
    func pushBack (value: Color)-> Bool {
       abort ()
    }
    func append (value: Color)-> Bool {
       abort ()
    }
    func appendArray (array: PackedColorArray) {
       abort ()
    }
    func remove (index: Int) {
       abort ()
    }
    func insert (atIndex: Int, value: Color)-> Int {
       abort ()
    }
    func resize (newSize: Int)-> Int {
       abort ()
    }
    func has (value: Color)-> Bool {
       abort ()
    }
    func invert () {
       abort ()
    }
    func subarray (from: Int, to: Int)-> PackedColorArray {
       abort ()
    }
    func toByteArray ()-> PackedByteArray {
       abort ()
    }
    func sort () {
       abort ()
    }
    func duplicate ()-> PackedColorArray {
       abort ()
    }
}

